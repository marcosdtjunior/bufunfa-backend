// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int        @id @default(autoincrement())
  name              String
  email             String     @unique
  cpf               String     @unique
  password          String
  photo             String?
  background        String?
  type              String
  ceos              ceo[]
  employees         employee[]
}

model ceo {
  user              user       @relation(fields: [userId], references: [id])
  userId            Int
  companies         company[]
  @@id(userId)
}

model company {
  id                Int        @id @default(autoincrement())
  name              String
  slogan            String?
  description       String?
  cnpj              String     @unique
  logo              String?
  salary            Int
  ceo               ceo        @relation(fields: [ceoId], references: [userId])
  ceoId             Int        
  employeeCompanies employeeCompany[]
  tasks             task[]
  expenses          expense[]
}

model employee {
  user              user       @relation(fields: [userId], references: [id])
  userId            Int       
  employeeTasks     employeeTask[]
  employeeExpenses  employeeExpense[]
  employeeCompanies employeeCompany[]
  loans             loan[]
  @@id(userId)
}

model employeeCompany {
  employee          employee   @relation(fields: [employeeId], references: [userId])
  employeeId        Int
  company           company    @relation(fields: [companyId], references: [id])
  companyId         Int
  balance           Int
  @@id([employeeId, companyId])
}

model task {
  id                Int        @id @default(autoincrement())
  title             String
  description       String?
  value             Int
  company           company    @relation(fields: [companyId], references: [id])
  companyId         Int        
  employeeTasks     employeeTask[]
}

model employeeTask {
  employee          employee  @relation(fields: [employeeId], references: [userId])
  employeeId        Int
  task              task      @relation(fields: [taskId], references: [id])
  taskId            Int
  employeeStatus    String    @default("a fazer")      //a fazer, enviada ou feita
  ceoStatus         String    @default("pendente")      //pendente, validar ou concluída
  @@id([employeeId, taskId])
}

model expense {
  id                Int        @id @default(autoincrement())
  title             String
  description       String?
  value             Int
  type              Boolean    //obrigatória -> true  opcional -> false
  company           company    @relation(fields: [companyId], references: [id])
  companyId         Int
  employeeExpenses  employeeExpense[]
}

model employeeExpense {
  employee          employee   @relation(fields: [employeeId], references: [userId])
  employeeId        Int
  expense           expense    @relation(fields: [expenseId], references: [id])
  expenseId         Int
  status            Boolean    @default(false) //não-pago -> false  pago -> true
  @@id([employeeId, expenseId])
}

model loan {
  id                Int        @id @default(autoincrement())
  description       String
  value             Int
  accepted          Boolean    @default(false)
  employee          employee   @relation(fields: [employeeId], references: [userId])
  employeeId        Int
}